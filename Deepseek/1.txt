–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

import requests
import pytest
import uuid

BASE_URL = "https://petstore.swagger.io/v2"

def test_create_pet_with_extreme_values():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π"""
    data = {
        "id": 2**31 - 1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 32-–±–∏—Ç–Ω–æ–≥–æ integer
        "name": "X" * 1024,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
        "category": {
            "name": "üêâüöÄ¬ß¬±!@#$%^&*()",  # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏
        },
        "photoUrls": [
            f"https://example.com/{uuid.uuid4()}.jpg"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π URL
        ],
        "status": "available"
    }
    
    response = requests.post(f"{BASE_URL}/pet", json=data)
    assert response.status_code == 200, "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
    assert response.json()['id'] == data['id']

def test_pet_status_validation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    data = {
        "name": "InvalidStatusPet",
        "status": "teleported"  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    }
    
    response = requests.post(f"{BASE_URL}/pet", json=data)
    assert response.status_code == 400, "–ü—Ä–∏–Ω—è—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å"

def test_parallel_photo_uploads():
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞"""
    pet_id = 999888777
    files = [
        ('file', ('image1.jpg', b'fake_jpeg_content', 'image/jpeg')),
        ('file', ('image2.png', b'fake_png_content', 'image/png'))
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
    requests.post(f"{BASE_URL}/pet", json={"id": pet_id, "name": "MultiPhotoPet"})
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for file in files:
        response = requests.post(
            f"{BASE_URL}/pet/{pet_id}/uploadImage",
            files=[file]
        )
        assert response.status_code == 200, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    pet_data = requests.get(f"{BASE_URL}/pet/{pet_id}").json()
    assert len(pet_data['photoUrls']) == 2, "–ù–µ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"


def test_order_time_paradox():
    """–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –¥–∞—Ç–æ–π –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ"""
    order_data = {
        "id": 111222333,
        "petId": 1,
        "quantity": 1,
        "shipDate": "1969-07-20T00:00:00Z",  # –î–∞—Ç–∞ –≤—ã—Å–∞–¥–∫–∏ –Ω–∞ –õ—É–Ω—É
        "status": "approved"
    }
    
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    assert response.status_code == 200, "–ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–¥–æ–∫—Å–∞–º–∏"
    assert "shipDate" in response.json()

def test_negative_inventory():
    """–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    order_data = {
        "petId": 1,
        "quantity": -5,  # –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        "status": "approved"
    }
    
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    assert response.status_code == 400, "–†–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"

def test_zombie_order():
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
    order_id = 987654321
    
    # –°–æ–∑–¥–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    requests.post(f"{BASE_URL}/store/order", json={"id": order_id, "status": "placed"})
    requests.delete(f"{BASE_URL}/store/order/{order_id}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    response = requests.put(
        f"{BASE_URL}/store/order/{order_id}",
        json={"status": "approved"}
    )
    assert response.status_code == 404, "–†–∞–±–æ—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º –≤–æ–∑–º–æ–∂–Ω–∞"

def test_quantum_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    user_data = {
        "username": "schrodinger_cat",
        "email": "cat@box.com",  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
        "userStatus": 255  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
    }
    
    response = requests.post(f"{BASE_URL}/user", json=user_data)
    assert response.status_code == 200, "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    user_response = requests.get(f"{BASE_URL}/user/{user_data['username']}")
    assert user_response.json()['email'] == user_data['email']

def test_emoji_user_profile():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–º–æ–¥–∑–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
    user_data = {
        "username": "üëΩAlien123",
        "firstName": "üõ∏",
        "lastName": "üöÄ",
        "password": "üååüí´üå†"
    }
    
    response = requests.post(f"{BASE_URL}/user", json=user_data)
    assert response.status_code == 200, "–ü—Ä–æ–±–ª–µ–º—ã —Å Unicode"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    user_info = requests.get(f"{BASE_URL}/user/{user_data['username']}").json()
    assert user_info['firstName'] == "üõ∏"

def test_password_invisibility():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π"""
    password = "TopSecret123"
    user_data = {
        "username": "secret_agent",
        "password": password
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    requests.post(f"{BASE_URL}/user", json=user_data)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = requests.get(f"{BASE_URL}/user/{user_data['username']}").json()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
    assert "password" not in user_info, "–ü–∞—Ä–æ–ª—å –≤–∏–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API"
    assert user_info.get('passwordHash') is None, "–•—ç—à –ø–∞—Ä–æ–ª—è —Ä–∞—Å–∫—Ä—ã—Ç"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])


