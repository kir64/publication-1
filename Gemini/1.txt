Пара ошибок в тестах, оценивают только основной функцианал.


import pytest
import requests
import json

BASE_URL = "https://petstore.swagger.io/v2"

class TestPetEndpoint:
    def test_add_new_pet_positive(self):
        """Позитивный тест: Добавление нового питомца с корректными данными."""
        pet_payload = {
            "id": 12345,
            "category": {"id": 1, "name": "Dogs"},
            "name": "doggie",
            "photoUrls": ["string"],
            "tags": [{"id": 0, "name": "cute"}],
            "status": "available"
        }
        headers = {'Content-Type': 'application/json'}
        response = requests.post(f"{BASE_URL}/pet", headers=headers, data=json.dumps(pet_payload))
        assert response.status_code == 200
        assert response.json()['id'] == 12345

    def test_get_pet_by_id_positive(self):
        """Позитивный тест: Получение питомца по ID."""
        pet_id = 12345 # Используем ID питомца, созданного в предыдущем тесте или существующего
        response = requests.get(f"{BASE_URL}/pet/{pet_id}")
        assert response.status_code == 200
        assert response.json()['id'] == pet_id

    def test_get_pet_by_id_negative_not_found(self):
        """Негативный тест: Получение питомца по несуществующему ID (ошибка 404)."""
        pet_id = 999999 # Заведомо несуществующий ID
        response = requests.get(f"{BASE_URL}/pet/{pet_id}")
        assert response.status_code == 404

    def test_add_new_pet_negative_invalid_content_type(self):
        """Негативный тест: Добавление питомца с неверным Content-Type."""
        pet_payload = {
            "id": 12346,
            "name": "catty",
            "status": "pending"
        }
        headers = {'Content-Type': 'application/xml'} # Неверный Content-Type
        response = requests.post(f"{BASE_URL}/pet", headers=headers, data=json.dumps(pet_payload))
        assert response.status_code == 415 # Ожидаем ошибку 415 Unsupported Media Type

    def test_update_existing_pet_positive(self):
        """Позитивный тест: Обновление существующего питомца."""
        pet_payload_update = {
            "id": 12345, # ID существующего питомца
            "name": "doggie_updated",
            "status": "sold"
        }
        headers = {'Content-Type': 'application/json'}
        response = requests.put(f"{BASE_URL}/pet", headers=headers, data=json.dumps(pet_payload_update))
        assert response.status_code == 200
        assert response.json()['name'] == "doggie_updated"
        assert response.json()['status'] == "sold"

    def test_find_pets_by_status_positive(self):
        """Позитивный тест: Поиск питомцев по статусу 'available'."""
        status = "available"
        response = requests.get(f"{BASE_URL}/pet/findByStatus?status={status}")
        assert response.status_code == 200
        assert isinstance(response.json(), list) # Ожидаем список питомцев

    def test_find_pets_by_status_negative_invalid_status(self):
        """Негативный тест: Поиск питомцев по неверному статусу."""
        status = "invalid_status"
        response = requests.get(f"{BASE_URL}/pet/findByStatus?status={status}")
        assert response.status_code == 200 # API возвращает 200 OK, даже если статус неверный, но пустой список
        assert isinstance(response.json(), list)
        assert len(response.json()) == 0 # Ожидаем пустой список

    def test_delete_pet_positive(self):
        """Позитивный тест: Удаление существующего питомца."""
        pet_id = 12345 # ID существующего питомца
        response = requests.delete(f"{BASE_URL}/pet/{pet_id}")
        assert response.status_code == 200

    def test_delete_pet_negative_not_found(self):
        """Негативный тест: Удаление несуществующего питомца (ошибка 404)."""
        pet_id = 999999 # Заведомо несуществующий ID
        response = requests.delete(f"{BASE_URL}/pet/{pet_id}")
        assert response.status_code == 404

    def test_add_new_pet_negative_missing_required_field(self):
        """Негативный тест: Добавление питомца с пропущенным обязательным полем 'name'."""
        pet_payload = {
            "id": 12347,
            "category": {"id": 1, "name": "Birds"},
            "photoUrls": ["string"],
            "status": "available"
        } # Поле 'name' отсутствует
        headers = {'Content-Type': 'application/json'}
        response = requests.post(f"{BASE_URL}/pet", headers=headers, data=json.dumps(pet_payload))
        assert response.status_code == 400 # Ожидаем ошибку 400 Bad Request из-за отсутствия обязательного поля (зависит от валидации API)
        # В данном API, похоже, не требует 'name' как обязательное поле, код возвращает 200, но тело ответа указывает на ошибку.
        # В реальном API, скорее всего, будет 400 Bad Request

    def test_upload_image_for_pet_positive(self):
        """Позитивный тест: Загрузка изображения для питомца."""
        pet_id = 12345 # ID существующего питомца
        files = {'file': open('test_image.png', 'rb')} # Необходимо создать файл test_image.png
        response = requests.post(f"{BASE_URL}/pet/{pet_id}/uploadImage", files=files)
        assert response.status_code == 200

    def test_upload_image_for_pet_negative_pet_not_found(self):
        """Негативный тест: Загрузка изображения для несуществующего питомца (ошибка 404)."""
        pet_id = 999999 # Заведомо несуществующий ID
        files = {'file': open('test_image.png', 'rb')} # Необходимо создать файл test_image.png
        response = requests.post(f"{BASE_URL}/pet/{pet_id}/uploadImage", files=files)
        assert response.status_code == 404

    def test_place_order_positive(self):
        """Позитивный тест: Размещение заказа."""
        order_payload = {
            "petId": 12345, # ID существующего питомца
            "quantity": 1,
            "shipDate": "2024-01-01T10:10:10.000Z",
            "status": "placed",
            "complete": True
        }
        headers = {'Content-Type': 'application/json'}
        response = requests.post(f"{BASE_URL}/store/order", headers=headers, data=json.dumps(order_payload))
        assert response.status_code == 200
        assert response.json()['petId'] == 12345

    def test_get_order_by_id_positive(self):
        """Позитивный тест: Получение заказа по ID."""
        order_id = response.json()['orderId'] # Используем ID заказа, созданного в предыдущем тесте или известного заказа
        response = requests.get(f"{BASE_URL}/store/order/{order_id}")
        assert response.status_code == 200
        assert response.json()['id'] == order_id

    def test_get_order_by_id_negative_not_found(self):
        """Негативный тест: Получение заказа по несуществующему ID (ошибка 404)."""
        order_id = 999999 # Заведомо несуществующий ID
        response = requests.get(f"{BASE_URL}/store/order/{order_id}")
        assert response.status_code == 404

if __name__ == "__main__":
    # Запуск всех тестов
    pytest.main([__file__, "-v"])

