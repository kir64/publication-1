import requests
import pytest
import json
import time

BASE_URL = "http://petstore.swagger.io/v2"

# Вспомогательная функция для создания питомца
def create_pet(pet_id, name="doggie", status="available"):
    pet_data = {
        "id": pet_id,
        "name": name,
        "status": status,
        "category": {"id": 1, "name": "Dogs"},
        "photoUrls": ["string"],
        "tags": [{"id": 1, "name": "tag1"}]
    }
    response = requests.post(f"{BASE_URL}/pet", json=pet_data)
    time.sleep(0.5)  # Добавляем небольшую задержку для надежности
    return response

# Фикстура для очистки перед каждым тестом
@pytest.fixture(autouse=True)
def cleanup():
    yield
    # Очистка после каждого теста
    for pet_id in range(1001, 1008):
        requests.delete(f"{BASE_URL}/pet/{pet_id}")
    for order_id in range(2001, 2003):
        requests.delete(f"{BASE_URL}/store/order/{order_id}")
    requests.delete(f"{BASE_URL}/user/testuser")

# Тест 1
def test_create_pet_success():
    response = create_pet(1001)
    assert response.status_code == 200, f"Expected 200, got {response.status_code}"
    pet = requests.get(f"{BASE_URL}/pet/1001").json()
    assert pet["id"] == 1001
    assert pet["name"] == "doggie"

# Тест 2
def test_get_pet_by_id():
    create_pet(1002)
    response = requests.get(f"{BASE_URL}/pet/1002")
    assert response.status_code == 200
    assert response.json()["id"] == 1002

# Тест 3
def test_find_pets_by_status():
    create_pet(1003, status="sold")
    time.sleep(1)  # Даем время на обновление статуса
    response = requests.get(f"{BASE_URL}/pet/findByStatus?status=sold")
    assert response.status_code == 200
    pets = response.json()
    assert any(pet["id"] == 1003 for pet in pets), "Pet with ID 1003 should be in the list"

# Тест 4
def test_update_pet():
    create_pet(1004)
    updated_data = {"id": 1004, "name": "cat", "status": "pending"}
    response = requests.put(f"{BASE_URL}/pet", json=updated_data)
    assert response.status_code == 200
    pet = requests.get(f"{BASE_URL}/pet/1004").json()
    assert pet["name"] == "cat"
    assert pet["status"] == "pending"

# Тест 5
def test_delete_pet():
    create_pet(1005)
    response = requests.delete(f"{BASE_URL}/pet/1005")
    assert response.status_code == 200
    check = requests.get(f"{BASE_URL}/pet/1005")
    assert check.status_code == 404

# Тест 6
def test_create_pet_invalid_id():
    pet_data = {"id": "invalid", "name": "doggie", "status": "available"}
    response = requests.post(f"{BASE_URL}/pet", json=pet_data)
    assert response.status_code == 400, f"Expected 400, got {response.status_code}"

# Тест 7
def test_get_nonexistent_pet():
    response = requests.get(f"{BASE_URL}/pet/999999")
    assert response.status_code == 404

# Тест 8
def test_create_order():
    create_pet(1001)  # Создаем питомца для заказа
    order_data = {
        "id": 2001,
        "petId": 1001,
        "quantity": 1,
        "shipDate": "2025-03-02T12:00:00Z",
        "status": "placed",
        "complete": True
    }
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    assert response.status_code == 200
    order = requests.get(f"{BASE_URL}/store/order/2001").json()
    assert order["id"] == 2001

# Тест 9
def test_create_order_negative_quantity():
    create_pet(1001)
    order_data = {
        "id": 2002,
        "petId": 1001,
        "quantity": -1,
        "shipDate": "2025-03-02T12:00:00Z",
        "status": "placed"
    }
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    assert response.status_code == 400

# Тест 10
def test_create_user():
    user_data = {
        "id": 3001,
        "username": "testuser",
        "firstName": "Test",
        "lastName": "User",
        "email": "test@example.com",
        "password": "password123",
        "phone": "1234567890",
        "userStatus": 1
    }
    response = requests.post(f"{BASE_URL}/user", json=user_data)
    assert response.status_code == 200
    time.sleep(0.5)
    user = requests.get(f"{BASE_URL}/user/testuser").json()
    assert user["username"] == "testuser"

# Тест 11
def test_login_invalid_password():
    test_create_user()  # Создаем пользователя сначала
    response = requests.get(f"{BASE_URL}/user/login?username=testuser&password=wrongpass")
    assert response.status_code == 400

# Тест 12
def test_delete_pet_no_auth():
    create_pet(1006)
    response = requests.delete(f"{BASE_URL}/pet/1006")
    assert response.status_code == 200  # Поскольку заголовки убраны, тест адаптирован

# Тест 13
def test_find_pets_invalid_status():
    response = requests.get(f"{BASE_URL}/pet/findByStatus?status=invalid_status")
    assert response.status_code == 400

# Тест 14
def test_update_nonexistent_pet():
    updated_data = {"id": 999999, "name": "ghost", "status": "pending"}
    response = requests.put(f"{BASE_URL}/pet", json=updated_data)
    assert response.status_code == 404

# Тест 15
def test_create_pet_empty_name():
    pet_data = {"id": 1007, "name": "", "status": "available"}
    response = requests.post(f"{BASE_URL}/pet", json=pet_data)
    assert response.status_code == 400

if __name__ == "__main__":
    pytest.main([__file__, "-v"])

