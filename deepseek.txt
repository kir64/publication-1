–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

import requests
import pytest
import uuid

BASE_URL = "https://petstore.swagger.io/v2"

def test_create_pet_with_extreme_values():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π"""
    data = {
        "id": 2**31 - 1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 32-–±–∏—Ç–Ω–æ–≥–æ integer
        "name": "X" * 1024,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
        "category": {
            "name": "üêâüöÄ¬ß¬±!@#$%^&*()",  # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏
        },
        "photoUrls": [
            f"https://example.com/{uuid.uuid4()}.jpg"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π URL
        ],
        "status": "available"
    }
    
    response = requests.post(f"{BASE_URL}/pet", json=data)
    assert response.status_code == 200, "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
    assert response.json()['id'] == data['id']

def test_pet_status_validation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    data = {
        "name": "InvalidStatusPet",
        "status": "teleported"  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    }
    
    response = requests.post(f"{BASE_URL}/pet", json=data)
    assert response.status_code == 400, "–ü—Ä–∏–Ω—è—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å"

def test_parallel_photo_uploads():
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞"""
    pet_id = 999888777
    files = [
        ('file', ('image1.jpg', b'fake_jpeg_content', 'image/jpeg')),
        ('file', ('image2.png', b'fake_png_content', 'image/png'))
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
    requests.post(f"{BASE_URL}/pet", json={"id": pet_id, "name": "MultiPhotoPet"})
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for file in files:
        response = requests.post(
            f"{BASE_URL}/pet/{pet_id}/uploadImage",
            files=[file]
        )
        assert response.status_code == 200, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    pet_data = requests.get(f"{BASE_URL}/pet/{pet_id}").json()
    assert len(pet_data['photoUrls']) == 2, "–ù–µ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"


def test_order_time_paradox():
    """–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –¥–∞—Ç–æ–π –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ"""
    order_data = {
        "id": 111222333,
        "petId": 1,
        "quantity": 1,
        "shipDate": "1969-07-20T00:00:00Z",  # –î–∞—Ç–∞ –≤—ã—Å–∞–¥–∫–∏ –Ω–∞ –õ—É–Ω—É
        "status": "approved"
    }
    
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    assert response.status_code == 200, "–ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–¥–æ–∫—Å–∞–º–∏"
    assert "shipDate" in response.json()

def test_negative_inventory():
    """–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    order_data = {
        "petId": 1,
        "quantity": -5,  # –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        "status": "approved"
    }
    
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    assert response.status_code == 400, "–†–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"

def test_zombie_order():
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
    order_id = 987654321
    
    # –°–æ–∑–¥–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    requests.post(f"{BASE_URL}/store/order", json={"id": order_id, "status": "placed"})
    requests.delete(f"{BASE_URL}/store/order/{order_id}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    response = requests.put(
        f"{BASE_URL}/store/order/{order_id}",
        json={"status": "approved"}
    )
    assert response.status_code == 404, "–†–∞–±–æ—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º –≤–æ–∑–º–æ–∂–Ω–∞"

def test_quantum_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    user_data = {
        "username": "schrodinger_cat",
        "email": "cat@box.com",  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
        "userStatus": 255  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
    }
    
    response = requests.post(f"{BASE_URL}/user", json=user_data)
    assert response.status_code == 200, "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    user_response = requests.get(f"{BASE_URL}/user/{user_data['username']}")
    assert user_response.json()['email'] == user_data['email']

def test_emoji_user_profile():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–º–æ–¥–∑–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
    user_data = {
        "username": "üëΩAlien123",
        "firstName": "üõ∏",
        "lastName": "üöÄ",
        "password": "üååüí´üå†"
    }
    
    response = requests.post(f"{BASE_URL}/user", json=user_data)
    assert response.status_code == 200, "–ü—Ä–æ–±–ª–µ–º—ã —Å Unicode"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    user_info = requests.get(f"{BASE_URL}/user/{user_data['username']}").json()
    assert user_info['firstName'] == "üõ∏"

def test_password_invisibility():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π"""
    password = "TopSecret123"
    user_data = {
        "username": "secret_agent",
        "password": password
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    requests.post(f"{BASE_URL}/user", json=user_data)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = requests.get(f"{BASE_URL}/user/{user_data['username']}").json()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
    assert "password" not in user_info, "–ü–∞—Ä–æ–ª—å –≤–∏–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API"
    assert user_info.get('passwordHash') is None, "–•—ç—à –ø–∞—Ä–æ–ª—è —Ä–∞—Å–∫—Ä—ã—Ç"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])



----
–ú–µ–¥–ª–µ–Ω–Ω–∞—è(–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è)
–ó–∞–º–µ—Ç–Ω–æ –º–∞–ª–æ –∫–æ–¥–∞, –ø—Ä–∏—á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç–Ω–∞—è —á–∞—Å—Ç—å —Å –æ—à–∏–±–∫–∞–º–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏


import requests
import colorama
from colorama import Fore, Style
import time
import threading

colorama.init(autoreset=True)

GREEN = Fore.GREEN
RED = Fore.RED
CYAN = Fore.CYAN
YELLOW = Fore.YELLOW
RESET = Style.RESET_ALL

BASE_URL = "https://petstore.swagger.io/v2"

def print_header(text):
    print(f"\n{CYAN}=== {text} ==={RESET}")

def check(condition, success_msg, error_msg):
    if condition:
        print(f"{GREEN}[–£–°–ü–ï–•] {success_msg}{RESET}")
    else:
        print(f"{RED}[–û–®–ò–ë–ö–ê] {error_msg}{RESET}")

# 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤
def test_pet_crud():
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤")
    pet_id = None
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    pet_data = {
        "id": 123456789,
        "name": "–®–∞—Ä–∏–∫",
        "category": {"id": 1, "name": "–°–æ–±–∞–∫–∏"},
        "photoUrls": ["http://example.com/dog.jpg"],
        "tags": [{"id": 1, "name": "–¥–≤–æ—Ä–Ω—è–≥–∞"}],
        "status": "available"
    }
    response = requests.post(f"{BASE_URL}/pet", json=pet_data)
    check(response.status_code == 200, 
         "–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω", 
         f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    if response.status_code == 200:
        pet_id = response.json().get("id")
        check(pet_id == pet_data["id"], 
             f"ID –ø–∏—Ç–æ–º—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {pet_id}", 
             "–û—à–∏–±–∫–∞ –≤ ID –ø–∏—Ç–æ–º—Ü–∞")
    else:
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    response = requests.get(f"{BASE_URL}/pet/{pet_id}")
    check(response.status_code == 200, 
         "–ü–∏—Ç–æ–º–µ—Ü –ø–æ–ª—É—á–µ–Ω", 
         f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    if response.status_code == 200:
        check(response.json()["name"] == "–®–∞—Ä–∏–∫", 
             "–ò–º—è –ø–∏—Ç–æ–º—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", 
             "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    updated_data = pet_data.copy()
    updated_data["name"] = "–ë–æ–±–∏–∫"
    response = requests.put(f"{BASE_URL}/pet", json=updated_data)
    check(response.status_code == 200, 
         "–ü–∏—Ç–æ–º–µ—Ü –æ–±–Ω–æ–≤–ª—ë–Ω", 
         f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    if response.status_code == 200:
        check(response.json()["name"] == "–ë–æ–±–∏–∫", 
             "–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", 
             "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏")

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    response = requests.delete(f"{BASE_URL}/pet/{pet_id}")
    check(response.status_code == 200, 
         "–ü–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª—ë–Ω", 
         f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    response = requests.get(f"{BASE_URL}/pet/{pet_id}")
    check(response.status_code == 404, 
         "–ü–∏—Ç–æ–º–µ—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ", 
         "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞")

# 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
def test_store_operations():
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏")
    order_id = None
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        "petId": 123456789,
        "quantity": 2,
        "status": "placed"
    }
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    check(response.status_code == 200, 
         "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω", 
         f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    if response.status_code == 200:
        order_id = response.json().get("id")
        check(order_id is not None, 
             f"ID –∑–∞–∫–∞–∑–∞: {order_id}", 
             "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–∫–∞–∑–∞")
    else:
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    response = requests.get(f"{BASE_URL}/store/order/{order_id}")
    check(response.status_code == 200, 
         "–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω", 
         f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    if response.status_code == 200:
        check(response.json()["quantity"] == 2, 
             "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", 
             "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    response = requests.delete(f"{BASE_URL}/store/order/{order_id}")
    check(response.status_code == 200, 
         "–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω", 
         f"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    response = requests.get(f"{BASE_URL}/store/order/{order_id}")
    check(response.status_code == 404, 
         "–ó–∞–∫–∞–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ", 
         "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

# 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def test_user_management():
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    username = f"test_user_{int(time.time())}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        "username": username,
        "email": "test@example.com",
        "password": "secret123"
    }
    response = requests.post(f"{BASE_URL}/user", json=user_data)
    check(response.status_code == 200, 
         "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω", 
         f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = requests.get(f"{BASE_URL}/user/{username}")
    check(response.status_code == 200, 
         "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω", 
         f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    if response.status_code == 200:
        check("password" not in response.json(), 
             "–ü–∞—Ä–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ", 
             "–£—Ç–µ—á–∫–∞ –ø–∞—Ä–æ–ª—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_data = user_data.copy()
    updated_data["email"] = "new@example.com"
    response = requests.put(f"{BASE_URL}/user/{username}", json=updated_data)
    check(response.status_code == 200, 
         "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã", 
         f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = requests.delete(f"{BASE_URL}/user/{username}")
    check(response.status_code == 200, 
         "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω", 
         f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    response = requests.get(f"{BASE_URL}/user/{username}")
    check(response.status_code == 404, 
         "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ", 
         "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤
def test_pet_additional():
    print_header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    for status in ["available", "pending", "sold"]:
        response = requests.get(f"{BASE_URL}/pet/findByStatus?status={status}")
        check(response.status_code == 200 and all(p["status"] == status for p in response.json()), 
             f"–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É '{status}' —Ä–∞–±–æ—Ç–∞–µ—Ç", 
             f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É '{status}'")

    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
    response = requests.get(f"{BASE_URL}/pet/findByTags?tags=–¥–≤–æ—Ä–Ω—è–≥–∞")
    check(response.status_code == 200 and len(response.json()) > 0, 
         "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç", 
         "–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º")

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def test_auth_security():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    username = f"auth_test_{int(time.time())}"
    password = "securePass123"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    requests.post(f"{BASE_URL}/user", json={"username": username, "password": password})

    # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    response = requests.get(f"{BASE_URL}/user/login", params={"username": username, "password": password})
    check(response.status_code == 200 and "session" in response.headers.get("Set-Cookie", ""), 
         "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", 
         "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    check("password" not in response.text, 
         "–ü–∞—Ä–æ–ª—å –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è", 
         "–£—Ç–µ—á–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    # –ù–µ—É–¥–∞—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    response = requests.get(f"{BASE_URL}/user/login", params={"username": username, "password": "wrong"})
    check(response.status_code == 401, 
         "–ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç", 
         f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: {response.status_code}")

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def test_invalid_data_handling():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    response = requests.get(f"{BASE_URL}/pet/999999999")
    check(response.status_code == 404, 
         "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID", 
         f"–°—Ç–∞—Ç—É—Å: {response.status_code}")

    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    response = requests.post(f"{BASE_URL}/pet", json={"invalid": "data"})
    check(response.status_code == 400, 
         "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 
         f"–°—Ç–∞—Ç—É—Å: {response.status_code}")

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def test_performance_scalability():
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    start_time = time.time()
    requests.get(f"{BASE_URL}/pet/findByStatus?status=available")
    duration = time.time() - start_time
    check(duration < 2.0, 
         f"–ü—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ ({duration:.2f} —Å–µ–∫)", 
         f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç ({duration:.2f} —Å–µ–∫)")

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    def make_request():
        requests.get(f"{BASE_URL}/pet/findByStatus?status=available")

    threads = [threading.Thread(target=make_request) for _ in range(10)]
    [t.start() for t in threads]
    [t.join() for t in threads]
    print(f"{YELLOW}[–ò–ù–§–û] 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ{RESET}")

# 8. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
def test_integration():
    print_header("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    pet_response = requests.post(f"{BASE_URL}/pet", json={
        "id": 987654321,
        "name": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π",
        "status": "available"
    })
    pet_id = pet_response.json().get("id") if pet_response.ok else None

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_response = requests.post(f"{BASE_URL}/store/order", json={
        "petId": pet_id,
        "quantity": 1
    })
    order_id = order_response.json().get("id") if order_response.ok else None

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    if pet_id:
        requests.delete(f"{BASE_URL}/pet/{pet_id}")
        check(requests.get(f"{BASE_URL}/pet/{pet_id}").status_code == 404, 
             "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞", 
             "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    if order_id:
        check(requests.delete(f"{BASE_URL}/store/order/{order_id}").status_code == 200, 
             "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", 
             "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

def main():
    tests = [
        test_pet_crud,
        test_store_operations,
        test_user_management,
        test_pet_additional,
        test_auth_security,
        test_invalid_data_handling,
        test_performance_scalability,
        test_integration
    ]
    
    for test in tests:
        try:
            test()
        except Exception as e:
            print(f"{RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {str(e)}{RESET}")

if __name__ == "__main__":
    main()


-----


import requests
import colorama
from colorama import Fore, Style
import time
import threading

colorama.init(autoreset=True)

BASE_URL = "https://restful-booker.herokuapp.com"
AUTH_DATA = {"username": "admin", "password": "password123"}
TEST_BOOKING = {
    "firstname": "–ò–≤–∞–Ω",
    "lastname": "–ü–µ—Ç—Ä–æ–≤",
    "totalprice": 1000,
    "depositpaid": True,
    "bookingdates": {"checkin": "2024-01-01", "checkout": "2024-01-10"},
    "additionalneeds": "–ó–∞–≤—Ç—Ä–∞–∫"
}

def print_result(condition, success_msg, error_msg, response=None):
    color = Fore.GREEN if condition else Fore.RED
    message = f"{color}{success_msg if condition else error_msg}"
    if response:
        message += f" [Status: {response.status_code}]"
    print(message)
    return condition

def get_auth_token():
    try:
        response = requests.post(f"{BASE_URL}/auth", json=AUTH_DATA)
        if print_result(response.status_code == 200, 
                       "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω", 
                       "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", 
                       response):
            return response.json().get("token")
        return None
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}{Style.RESET_ALL}")
        return None

def test_basic_operations():
    print(f"\n{Fore.CYAN}=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ ===")
    booking_id = None
    token = None
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        response = requests.post(f"{BASE_URL}/booking", json=TEST_BOOKING)
        if print_result(response.status_code == 200, 
                       "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", 
                       "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                       response):
            booking_id = response.json().get("bookingid")
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    if booking_id:
        try:
            response = requests.get(f"{BASE_URL}/booking/{booking_id}")
            if print_result(response.status_code == 200 and 
                           response.json()["firstname"] == TEST_BOOKING["firstname"], 
                           "–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", 
                           "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                           response):
                pass
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if booking_id:
        token = get_auth_token()
        updated_data = TEST_BOOKING.copy()
        updated_data["firstname"] = "–ü—ë—Ç—Ä"
        try:
            headers = {"Cookie": f"token={token}"} if token else {}
            response = requests.put(f"{BASE_URL}/booking/{booking_id}", 
                                  json=updated_data, 
                                  headers=headers)
            condition = response.status_code == 200 if token else response.status_code == 403
            print_result(condition, 
                        "–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", 
                        "–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                        response)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if booking_id and token:
        try:
            headers = {"Cookie": f"token={token}"}
            response = requests.patch(f"{BASE_URL}/booking/{booking_id}", 
                                     json={"totalprice": 1500}, 
                                     headers=headers)
            print_result(response.status_code == 200, 
                        "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", 
                        "–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                        response)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if booking_id and token:
        try:
            response = requests.delete(f"{BASE_URL}/booking/{booking_id}", 
                                      headers={"Cookie": f"token={token}"})
            if print_result(response.status_code == 201, 
                           "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", 
                           "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                           response):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                response = requests.get(f"{BASE_URL}/booking/{booking_id}")
                print_result(response.status_code == 404, 
                            "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", 
                            "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è", 
                            response)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

def test_auth():
    print(f"\n{Fore.CYAN}=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===")
    invalid_token = "invalid_token123"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    try:
        response = requests.put(f"{BASE_URL}/booking/1", json={})
        print_result(response.status_code == 403, 
                   "–ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", 
                   "–£—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 
                   response)
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

    # –ü–æ–ø—ã—Ç–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    try:
        response = requests.delete(f"{BASE_URL}/booking/1", 
                                 headers={"Cookie": f"token={invalid_token}"})
        print_result(response.status_code == 403, 
                   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω", 
                   "–£—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞", 
                   response)
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

def test_error_handling():
    print(f"\n{Fore.CYAN}=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        invalid_booking = TEST_BOOKING.copy()
        del invalid_booking["firstname"]
        response = requests.post(f"{BASE_URL}/booking", json=invalid_booking)
        print_result(response.status_code == 400, 
                   "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç", 
                   "–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π", 
                   response)
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")

    # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    try:
        response = requests.get(f"{BASE_URL}/booking/999999999")
        print_result(response.status_code == 404, 
                   "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID", 
                   "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 404", 
                   response)
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 404: {str(e)}")

def test_security():
    print(f"\n{Fore.CYAN}=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===")
    
    # XSS-–∏–Ω—ä–µ–∫—Ü–∏—è
    try:
        xss_booking = TEST_BOOKING.copy()
        xss_booking["firstname"] = "<script>alert('xss')</script>"
        response = requests.post(f"{BASE_URL}/booking", json=xss_booking)
        safe_name = response.json().get("booking", {}).get("firstname", "")
        condition = "<" not in safe_name and ">" not in safe_name
        print_result(condition and response.status_code == 200, 
                   "XSS-–∏–Ω—ä–µ–∫—Ü–∏—è –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞", 
                   "–£—è–∑–≤–∏–º–æ—Å—Ç—å –∫ XSS-–∞—Ç–∞–∫–∞–º", 
                   response)
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ XSS: {str(e)}")

def test_performance():
    print(f"\n{Fore.CYAN}=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")
    
    def make_request():
        try:
            start = time.time()
            requests.get(f"{BASE_URL}/booking")
            return time.time() - start
        except:
            return None
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    try:
        threads = [threading.Thread(target=make_request) for _ in range(10)]
        [t.start() for t in threads]
        [t.join() for t in threads]
        print(f"{Fore.GREEN}10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {str(e)}")

if __name__ == "__main__":
    tests = [
        test_basic_operations,
        test_auth,
        test_error_handling,
        test_security,
        test_performance
    ]
    
    for test in tests:
        try:
            test()
        except Exception as e:
            print(f"{Fore.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}{'='*50}{Style.RESET_ALL}")

----
import requests
import time
import random

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://petstore.swagger.io/v2"
DELAY = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# ANSI –∫–æ–¥—ã –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
COLORS = {
    "RED": "\033[91m",
    "GREEN": "\033[92m",
    "YELLOW": "\033[93m",
    "BLUE": "\033[94m",
    "END": "\033[0m"
}

class TestData:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    @staticmethod
    def unique_id():
        return random.randint(100000, 999999)
    
    @staticmethod
    def pet_data():
        return {
            "id": TestData.unique_id(),
            "name": "TestPet",
            "category": {"id": 1, "name": "Dogs"},
            "status": "available"
        }
    
    @staticmethod
    def order_data(pet_id):
        return {
            "id": TestData.unique_id(),
            "petId": pet_id,
            "quantity": 1,
            "status": "placed"
        }
    
    @staticmethod
    def user_data():
        return {
            "id": TestData.unique_id(),
            "username": f"testuser{TestData.unique_id()}",
            "email": "test@example.com"
        }

def log(message, color="BLUE"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"{COLORS[color]}[*] {message}{COLORS['END']}")

def run_test(test_func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
    def wrapper():
        try:
            test_func()
            return True
        except Exception as e:
            log(f"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {str(e)}", "RED")
            return False
    return wrapper

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
@run_test
def test_pet_workflow():
    pet_data = TestData.pet_data()
    pet_id = pet_data["id"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    log("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞...")
    response = requests.post(f"{BASE_URL}/pet", json=pet_data)
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    assert response.json()["name"] == pet_data["name"], "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞"
    time.sleep(DELAY)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞...")
    response = requests.get(f"{BASE_URL}/pet/{pet_id}")
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    assert response.json()["status"] == "available", "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–∏—Ç–æ–º—Ü–∞"
    time.sleep(DELAY)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞...")
    updated_data = {"name": "UpdatedPet", "status": "sold"}
    response = requests.put(f"{BASE_URL}/pet", json={**pet_data, **updated_data})
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    response = requests.get(f"{BASE_URL}/pet/{pet_id}")
    assert response.json()["name"] == "UpdatedPet", "–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å"
    time.sleep(DELAY)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    log("–£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞...")
    response = requests.delete(f"{BASE_URL}/pet/{pet_id}")
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    response = requests.get(f"{BASE_URL}/pet/{pet_id}")
    assert response.status_code == 404, f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    log("–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "GREEN")

@run_test
def test_order_workflow():
    pet_id = TestData.pet_data()["id"]
    order_data = TestData.order_data(pet_id)
    order_id = order_data["id"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    log("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
    response = requests.post(f"{BASE_URL}/store/order", json=order_data)
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞...")
    response = requests.get(f"{BASE_URL}/store/order/{order_id}")
    assert response.json()["status"] == "placed", "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
    time.sleep(DELAY)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    log("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
    response = requests.delete(f"{BASE_URL}/store/order/{order_id}")
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    response = requests.get(f"{BASE_URL}/store/order/{order_id}")
    assert response.status_code == 404, f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    log("–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "GREEN")

@run_test
def test_user_workflow():
    user_data = TestData.user_data()
    username = user_data["username"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    response = requests.post(f"{BASE_URL}/user", json=user_data)
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    response = requests.get(f"{BASE_URL}/user/{username}")
    assert response.json()["email"] == "test@example.com", "–ù–µ–≤–µ—Ä–Ω—ã–π email"
    time.sleep(DELAY)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    updated_data = {"email": "new@example.com"}
    response = requests.put(f"{BASE_URL}/user/{username}", json=updated_data)
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    response = requests.get(f"{BASE_URL}/user/{username}")
    assert response.json()["email"] == "new@example.com", "–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å"
    time.sleep(DELAY)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    response = requests.delete(f"{BASE_URL}/user/{username}")
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    response = requests.get(f"{BASE_URL}/user/{username}")
    assert response.status_code == 404, f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    log("–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "GREEN")

@run_test
def test_negative_scenarios():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞...")
    response = requests.get(f"{BASE_URL}/pet/999999999")
    assert response.status_code == 404, f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    time.sleep(DELAY)

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    response = requests.post(f"{BASE_URL}/pet", json={"invalid": "data"})
    assert response.status_code == 400, f"–û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
    log("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", "GREEN")

if __name__ == "__main__":
    tests = [
        test_pet_workflow,
        test_order_workflow,
        test_user_workflow,
        test_negative_scenarios
    ]
    
    results = {"passed": 0, "failed": 0}
    
    for test in tests:
        if test():
            results["passed"] += 1
        else:
            results["failed"] += 1
        time.sleep(DELAY*2)

    print(f"\n{COLORS['GREEN']}–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {results['passed']}{COLORS['END']}")
    print(f"{COLORS['RED']}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {results['failed']}{COLORS['END']}")

